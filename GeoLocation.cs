// Generated by https://quicktype.io
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

public partial class GeoLocation
{
    [JsonProperty("documentation")]
    public Uri Documentation { get; set; }

    [JsonProperty("licenses")]
    public License[] Licenses { get; set; }

    [JsonProperty("rate")]
    public Rate Rate { get; set; }

    [JsonProperty("results")]
    public Result[] Results { get; set; }

    [JsonProperty("status")]
    public Status Status { get; set; }

    [JsonProperty("stay_informed")]
    public StayInformed StayInformed { get; set; }

    [JsonProperty("thanks")]
    public string Thanks { get; set; }

    [JsonProperty("timestamp")]
    public Timestamp Timestamp { get; set; }

    [JsonProperty("total_results")]
    public long TotalResults { get; set; }
}

public partial class License
{
    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("url")]
    public Uri Url { get; set; }
}

public partial class Rate
{
    [JsonProperty("limit")]
    public long Limit { get; set; }

    [JsonProperty("remaining")]
    public long Remaining { get; set; }

    [JsonProperty("reset")]
    public long Reset { get; set; }
}

public partial class Result
{
    [JsonProperty("bounds")]
    public Bounds Bounds { get; set; }

    [JsonProperty("components")]
    public Dictionary<string, string> Components { get; set; }

    [JsonProperty("confidence")]
    public long Confidence { get; set; }

    [JsonProperty("formatted")]
    public string Formatted { get; set; }

    [JsonProperty("geometry")]
    public Geometry Geometry { get; set; }
}

public partial class Bounds
{
    [JsonProperty("northeast")]
    public Geometry Northeast { get; set; }

    [JsonProperty("southwest")]
    public Geometry Southwest { get; set; }
}

public partial class Geometry
{
    [JsonProperty("lat")]
    public double Lat { get; set; }

    [JsonProperty("lng")]
    public double Lng { get; set; }
}

public partial class Status
{
    [JsonProperty("code")]
    public long Code { get; set; }

    [JsonProperty("message")]
    public string Message { get; set; }
}

public partial class StayInformed
{
    [JsonProperty("blog")]
    public Uri Blog { get; set; }

    [JsonProperty("twitter")]
    public Uri Twitter { get; set; }
}

public partial class Timestamp
{
    [JsonProperty("created_http")]
    public string CreatedHttp { get; set; }

    [JsonProperty("created_unix")]
    public long CreatedUnix { get; set; }
}

public partial class GeoLocation
{
    public static GeoLocation FromJson(string json) => JsonConvert.DeserializeObject<GeoLocation>(json, Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this GeoLocation self) => JsonConvert.SerializeObject(self, Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
    };
}

